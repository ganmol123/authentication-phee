---
admin:
  annotations: {}
  enabled: true
  http:
    containerPort: 8001
    enabled: true
    parameters: []
    servicePort: 8001
  ingress:
    annotations: {}
    enabled: false
    hostname: ~
    path: /
  tls:
    containerPort: 8444
    enabled: true
    parameters:
      - http2
    servicePort: 8444
  type: NodePort
autoscaling:
  enabled: false
  maxReplicas: 5
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
  minReplicas: 2
  targetCPUUtilizationPercentage: ~
deploymentAnnotations: {}
enterprise:
  enabled: false
  license_secret: you-must-create-a-kong-license-secret
  portal:
    enabled: false
  rbac:
    admin_gui_auth: basic-auth
    admin_gui_auth_conf_secret: you-must-create-an-admin-gui-auth-conf-secret
    enabled: false
    session_conf_secret: you-must-create-an-rbac-session-conf-secret
  smtp:
    admin_emails_from: none@example.com
    admin_emails_reply_to: none@example.com
    auth:
      smtp_password_secret: password
      smtp_username: root@smtp.com
    enabled: false
    portal_emails_from: none@example.com
    portal_emails_reply_to: none@example.com
    smtp_admin_emails: none@example.com
    smtp_host: smtp.example.com
    smtp_port: 587
    smtp_starttls: true
  vitals:
    enabled: true
env:
  admin_access_log: /dev/stdout
  admin_error_log: /dev/stderr
  admin_gui_access_log: /dev/stdout
  admin_gui_error_log: /dev/stderr
  database: postgres
  nginx_worker_processes: "1"
  pg_database: kong
  pg_host: postgres
  pg_password: password
  pg_port: 5432
  pg_timeout: 5000
  pg_user: root
  portal_api_access_log: /dev/stdout
  portal_api_error_log: /dev/stderr
  prefix: /kong_prefix/
  proxy_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
image:
  pullPolicy: IfNotPresent
  repository: kong
  tag: "2.8"
ingressController:
  admissionWebhook:
    certificate:
      provided: false
    enabled: false
    failurePolicy: Ignore
    port: 8080
  args: []
  enabled: true
  env:
    kong_admin_tls_skip_verify: true
  image:
    repository: kong/kubernetes-ingress-controller
    tag: 2.3
  ingressClass: kong
  ingressClassAnnotations: {}
  installCRDs: false
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  rbac:
    create: true
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  serviceAccount:
    annotations: {}
    create: true
    name: ~
lifecycle:
  preStop:
    exec:
      command:
        - kong
        - quit
        - "--wait=15"
livenessProbe:
  failureThreshold: 3
  httpGet:
    path: /status
    port: metrics
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
manager:
  annotations: {}
  enabled: true
  externalIPs: []
  http:
    containerPort: 8002
    enabled: true
    parameters: []
    servicePort: 8002
  ingress:
    annotations: {}
    enabled: false
    hostname: ~
    path: /
  tls:
    containerPort: 8445
    enabled: true
    parameters:
      - http2
    servicePort: 8445
  type: NodePort
migrations:
  annotations:
    kuma.io/sidecar-injection: disabled
    sidecar.istio.io/inject: false
  postUpgrade: true
  preUpgrade: true
nodeSelector: {}
plugins: {}
podAnnotations:
  kuma.io/gateway: enabled
  traffic.sidecar.istio.io/includeInboundPorts: ""
podDisruptionBudget:
  enabled: false
podLabels: {}
podSecurityPolicy:
  enabled: false
  spec:
    allowPrivilegeEscalation: false
    fsGroup:
      rule: RunAsAny
    hostIPC: false
    hostNetwork: false
    hostPID: false
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
      - configMap
      - secret
      - emptyDir
portal:
  annotations: {}
  enabled: true
  externalIPs: []
  http:
    containerPort: 8003
    enabled: true
    parameters: []
    servicePort: 8003
  ingress:
    annotations: {}
    enabled: false
    hostname: ~
    path: /
  tls:
    containerPort: 8446
    enabled: true
    parameters:
      - http2
    servicePort: 8446
  type: NodePort
portalapi:
  annotations: {}
  enabled: true
  externalIPs: []
  http:
    containerPort: 8004
    enabled: true
    parameters: []
    servicePort: 8004
  ingress:
    annotations: {}
    enabled: false
    hostname: ~
    path: /
  tls:
    containerPort: 8447
    enabled: true
    parameters:
      - http2
    servicePort: 8447
  type: NodePort
postgresql:
  enabled: false
priorityClassName: ""
readinessProbe:
  failureThreshold: 3
  httpGet:
    path: /status
    port: metrics
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replicaCount: 1
resources: {}
secretVolumes: []
securityContext:
  runAsUser: 1000
serviceMonitor:
  enabled: false
status:
  http:
    containerPort: 8100
    enabled: true
  tls:
    containerPort: 8543
    enabled: false
terminationGracePeriodSeconds: 30
tolerations: []
updateStrategy: {}
waitImage:
  enabled: true
  pullPolicy: IfNotPresent
  repository: busybox
  tag: latest
